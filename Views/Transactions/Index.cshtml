@{
    ViewData["Title"] = "Transactions Management";
}

<div class="container mt-4">
    <div id="notification-placeholder"></div>
    <h2>Transactions Management</h2>

    <!-- New Transaction Button -->
    <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#transactionModal" onclick="clearForm()">
        Add New Transaction
    </button>

    <!----- Filter Section ----->
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">Filter Transactions</h5>
            <form id="filterForm" class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label for="bankNameFilter" class="form-label">Bank Name</label>
                    <input type="text" class="form-control" id="bankNameFilter" placeholder="e.g., Bank of America">
                </div>
                <div class="col-md-3">
                    <label for="minAmountFilter" class="form-label">Min Amount</label>
                    <input type="number" class="form-control" id="minAmountFilter" placeholder="100">
                </div>
                <div class="col-md-3">
                    <label for="maxAmountFilter" class="form-label">Max Amount</label>
                    <input type="number" class="form-control" id="maxAmountFilter" placeholder="5000">
                </div>
                <div class="col-md-2 d-flex">
                    <button type="button" id="filterBtn" class="btn btn-info me-2">Filter</button>
                    <button type="button" id="clearBtn" class="btn btn-secondary">Clear</button>
                </div>
            </form>
            <div class="form-text mt-2">
                You can filter by bank name OR by amount range. If a bank name is entered, it will be prioritized.
            </div>
        </div>
    </div>
    <!----- End of Filter Section ----->

    <!-- Transactions Table -->
    <div class="table-responsive">
        <table id="transactionsTable" class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Account Number</th>
                    <th>Beneficiary Name</th>
                    <th>Bank Name</th>
                    <th>SWIFT Code</th>
                    <th>Amount</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be populated by JavaScript -->
            </tbody>
        </table>
    </div>
</div>

<!-- Transaction Modal -->
<div class="modal fade" id="transactionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add Transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="transactionForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="transactionId" />

                    <div class="mb-3">
                        <label for="accountNumber" class="form-label">Account Number <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="accountNumber" name="accountNumber" maxlength="12" required>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="beneficiaryName" class="form-label">Beneficiary Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="beneficiaryName" name="beneficiaryName" maxlength="100" required>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="bankName" class="form-label">Bank Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="bankName" name="bankName" maxlength="100" required>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="swiftCode" class="form-label">SWIFT Code <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="swiftCode" name="swiftCode" maxlength="11" required>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="amount" name="amount" min="1" required>
                        <div class="invalid-feedback"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this transaction?</p>
                <p><strong>Account Number:</strong> <span id="deleteAccountNumber"></span></p>
                <p><strong>Amount:</strong> ₦<span id="deleteAmount"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function() {
            loadTransactions();

            $('#transactionForm').on('submit', function(e) {
                e.preventDefault();
                saveTransaction();
            });

            $('#confirmDelete').on('click', function() {
                deleteTransaction();
            });

            $('#filterBtn').on('click', function() {
                applyFilters();
            });

            $('#clearBtn').on('click', function() {
                clearFilters();
            });
        });

            function populateTable(data) {
            var tableBody = $('#transactionsTable tbody');
            tableBody.empty();

            if (!data || data.length === 0) {
                tableBody.append('<tr><td colspan="7" class="text-center">No transactions found.</td></tr>');
                return;
            }

            data.forEach(function(transaction) {
                tableBody.append(`
                    <tr>
                        <td>${transaction.transactionId}</td>
                        <td>${transaction.accountNumber || ''}</td>
                        <td>${transaction.beneficiaryName || ''}</td>
                        <td>${transaction.bankName || ''}</td>
                        <td>${transaction.swiftCode || ''}</td>
                        <td>₦${transaction.amount.toLocaleString()}</td>
                        <td>
                            <button class="btn btn-sm btn-warning me-1" onclick="editTransaction('${transaction.transactionId}')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="showDeleteModal('${transaction.transactionId}', '${transaction.accountNumber}', ${transaction.amount})">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                `);
            });
        }

        function loadTransactions() {
            $.ajax({
                url: '/Transactions/GetAll',
                type: 'GET',
                success: function(data) {
                    populateTable(data);
                },
                error: function() {
                    showAlert('danger', 'Failed to load transactions.');
                }
            });
        }

        function applyFilters() {
            var bankName = $('#bankNameFilter').val().trim();
            var minAmount = $('#minAmountFilter').val();
            var maxAmount = $('#maxAmountFilter').val();

            // Prioritize bank name filter if it has a value
            if (bankName) {
                $.ajax({
                    url: `/Transactions/GetByBankName?bankName=${encodeURIComponent(bankName)}`,
                    type: 'GET',
                    success: function(data) {
                        populateTable(data);
                    },
                    error: function() {
                        showAlert('danger', 'Error filtering by bank name.');
                    }
                });
            }
            // Otherwise, use amount range if either min or max is specified
            else if (minAmount || maxAmount) {
                var min = minAmount || 0;
                var max = maxAmount || 999999999;

                $.ajax({
                    url: `/Transactions/GetByAmountRange?min=${min}&max=${max}`,
                    type: 'GET',
                    success: function(data) {
                        populateTable(data);
                    },
                    error: function() {
                        showAlert('danger', 'Error filtering by amount range.');
                    }
                });
            }
            else {
                loadTransactions();
            }
        }

        function clearFilters() {
            $('#bankNameFilter').val('');
            $('#minAmountFilter').val('');
            $('#maxAmountFilter').val('');
            loadTransactions();
        }

        function clearForm() {
            $('#transactionForm')[0].reset();
            $('#transactionId').val('');
            $('#modalTitle').text('Add Transaction');
            clearValidationErrors();
        }

        function clearValidationErrors() {
            $('.form-control').removeClass('is-invalid');
            $('.invalid-feedback').text('');
        }

        function saveTransaction() {
            var transactionId = $('#transactionId').val();
            var transactionData = {
                TransactionId: transactionId ? transactionId : null,
                AccountNumber: $('#accountNumber').val(),
                BeneficiaryName: $('#beneficiaryName').val(),
                BankName: $('#bankName').val(),
                SWIFTCode: $('#swiftCode').val(),
                Amount: parseInt($('#amount').val())
            };

            var url = transactionId ? '/Transactions/Edit/' + transactionId : '/Transactions/Create';
            var type = transactionId ? 'PUT' : 'POST';

            $.ajax({
                url: url,
                type: type,
                contentType: 'application/json',
                data: JSON.stringify(transactionData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#transactionModal').modal('hide');
                        clearFilters(); 
                        showAlert('success', response.message);
                    }
                },

                error: function(xhr) {
                    if (xhr.status === 400) {
                        var errors = xhr.responseJSON.errors || xhr.responseJSON;
                        if (errors) {
                            displayValidationErrors(errors);
                        } else {
                            showAlert('danger', 'Validation failed. Please check your input.');
                        }
                    } else {
                        showAlert('danger', 'An error occurred: ' + xhr.statusText);
                    }
                }
            });
        }

        function displayValidationErrors(errors) {
            clearValidationErrors();
            if (typeof errors === 'object') {
                $.each(errors, function(field, messages) {
                    var fieldName = field.charAt(0).toLowerCase() + field.slice(1);
                    var input = $('#' + fieldName);
                    var feedback = input.next('.invalid-feedback');
                    if (input.length > 0) {
                        input.addClass('is-invalid');
                        feedback.text(Array.isArray(messages) ? messages.join(', ') : messages);
                    }
                });
            }
        }

        function editTransaction(id) {
            $.ajax({
                url: '/Transactions/Get?id=' + id,
                type: 'GET',
                success: function(transaction) {
                    $('#transactionId').val(transaction.transactionId);
                    $('#accountNumber').val(transaction.accountNumber);
                    $('#beneficiaryName').val(transaction.beneficiaryName);
                    $('#bankName').val(transaction.bankName);
                    $('#swiftCode').val(transaction.swiftCode);
                    $('#amount').val(transaction.amount);
                    $('#modalTitle').text('Edit Transaction');
                    $('#transactionModal').modal('show');
                    clearValidationErrors();
                }
            });
        }

        function showDeleteModal(id, accountNumber, amount) {
            $('#deleteAccountNumber').text(accountNumber);
            $('#deleteAmount').text(amount.toLocaleString());
            $('#confirmDelete').data('transactionId', id);
            $('#deleteModal').modal('show');
        }

        function deleteTransaction() {
            var id = $('#confirmDelete').data('transactionId');
            $.ajax({
                url: '/Transactions/Delete?id=' + id,
                type: 'DELETE',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#deleteModal').modal('hide');
                        clearFilters(); 
                        showAlert('success', response.message);
                    }
                },
                error: function() {
                    showAlert('danger', 'An error occurred while deleting the transaction.');
                }
            });
        }

        function showAlert(type, message) {
            var alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            $('#notification-placeholder').html(alertHtml);
            setTimeout(function() {
                $('#notification-placeholder .alert').alert('close');
            }, 5000);
        }
    </script>
}